#!/usr/bin/env ruby

require 'io/console'
require_relative 'lib/game.rb'
require_relative 'lib/modules/validate'
require_relative 'lib/modules/examples'
require_relative 'lib/modules/parse_example'

class Conway

  attr_accessor :initial_state_idx, :initial_state_file, :dimensions, :velocity

  def initialize(attributes)
    @initial_state_file = attributes[:initial_state_file]
    @initial_state_idx = 0
  end

  def start
    if initial_state_file
      handle_initial_state_file
    else
      ask_initial_state
    end
  end

  private

  extend Validate
  extend Examples
  extend ParseExample

  def handle_initial_state_file
    initial_state = self.class.parse_example(initial_state_file)
    self.class.validate_initial_state!(initial_state)

    system("clear")
    greeting
    velocity = ask_velocity
    game = Game.new(initial_state: initial_state, velocity: velocity)
    game.start!
  end

  def ask_initial_state
    system("clear")
    greeting
    puts ""
    puts "Select initial state (select with up/down keys, select with " + 
      "return key):"
    
    example_names = [:random] + self.class.example_names
    example_names.each_with_index do |example_name, idx|
      if initial_state_idx == idx
        puts example_name.upcase
      else
        puts example_name
      end
    end
    case read_char
    when "\e[A"
      self.initial_state_idx = 
        (self.initial_state_idx - 1) % example_names.length
      ask_initial_state
    when "\e[B"
      self.initial_state_idx = 
        (self.initial_state_idx + 1) % example_names.length
      ask_initial_state
    when "\r"
      if initial_state_idx == 0
        ask_whether_default_dimensions
      else
        game = Game.send(
          "make_#{example_names[initial_state_idx]}", 
          { velocity: ask_velocity }
        )
        game.start!
      end
    end
  end

  def ask_whether_default_dimensions
    puts ""
    puts "By default, a random game has 10x10 cells."
    puts "Do you want to change these dimensions? (y/n)"
    response = STDIN.gets.chomp
    if response == "n"
      game = Game.make_random(velocity: ask_velocity)
      game.start!
    elsif response == "y"
      dimensions = ask_dimensions
      game = Game.make_random(dimensions: dimensions, velocity: ask_velocity)
      game.start!
    else 
      ask_whether_default_dimensions
    end
  end

  def ask_dimensions
    puts ""
    puts "Enter game width:"
    width = STDIN.gets.chomp.to_i
    puts "Enter game height:"
    height = STDIN.gets.chomp.to_i
    [width, height]
  end
  
  def ask_velocity
    puts ""
    puts "By default, the game ticks every 0.5 seconds."
    puts "Do you want to change this? (y/n)"
    response = STDIN.gets.chomp
    if response == "n"
      nil
    elsif response == "y"
      puts "How often do you want the game to tick, in seconds?"
      STDIN.gets.chomp.to_f
    else 
      ask_velocity
    end
  end

  def greeting
    puts <<-'EOF'
    _____                               __   _      _  __     
   / ____|                             / _| | |    (_)/ _|    
  | |  __  __ _ _ __ ___   ___    ___ | |_  | |     _| |_ ___ 
  | | |_ |/ _` | '_ ` _ \ / _ \  / _ \|  _| | |    | |  _/ _ \
  | |__| | (_| | | | | | |  __/ | (_) | |   | |____| | ||  __/
   \_____|\__,_|_| |_| |_|\___|  \___/|_|   |______|_|_| \___|          
    EOF
  end

  def read_char
    STDIN.echo = false
    STDIN.raw!
  
    input = STDIN.getc.chr
    if input == "\e" then
      input << STDIN.read_nonblock(3) rescue nil
      input << STDIN.read_nonblock(2) rescue nil
    end
  ensure
    STDIN.echo = true
    STDIN.cooked!
  
    return input
  end

end

if $PROGRAM_NAME == __FILE__
  initial_state_file = ARGV.first
  conway = Conway.new(initial_state_file: initial_state_file)
  conway.start
end